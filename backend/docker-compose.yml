version: "2.15.1"

services:
  rabbitmq:
    image: rabbitmq:3-management
    restart: "no"
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - titan

  docker-daemon-1:
    build: ./../docker-daemon
    restart: "no"
    depends_on:
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - titan
    environment:
      RABBITMQ_HOST: rabbitmq
      NETWORK_NAME: titan
      DAEMON_INSTANCE_ID: 1
      LEADER: 1

  docker-daemon-2:
    build: ./../docker-daemon
    restart: "no"
    depends_on:
      - rabbitmq
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - titan
    environment:
      RABBITMQ_HOST: rabbitmq
      NETWORK_NAME: titan
      DAEMON_INSTANCE_ID: 2
      LEADER: 1

  srv1:
    build: ./
    restart: "no"
    depends_on:
      - rabbitmq
    ports:
      - 8080:8080
    networks:
      - titan
    volumes:
      - data:/app/data
    environment:
      PORT: 8080
      INSTANCE_ID: 1
      LEADER: 1
      RABBITMQ_HOST: rabbitmq
      WAIT_FOR_MQ: true

  srv2:
    build: ./
    restart: "no"
    depends_on:
      - rabbitmq
    ports:
      - 8081:8080
    networks:
      - titan
    volumes:
      - data:/app/data
    environment:
      PORT: 8080
      INSTANCE_ID: 2
      LEADER: 1
      RABBITMQ_HOST: rabbitmq
      WAIT_FOR_MQ: true

  srv3:
    build: ./
    restart: "no"
    depends_on:
      - rabbitmq
    ports:
      - 8082:8080
    networks:
      - titan
    volumes:
      - data:/app/data
    environment:
      PORT: 8080
      INSTANCE_ID: 3
      LEADER: 1
      RABBITMQ_HOST: rabbitmq
      WAIT_FOR_MQ: true
      
networks:
  titan:
    name: titan
    driver: bridge
volumes:
  data:
    driver: local
    driver_opts:
      type: none
      device: /data
      o: bind